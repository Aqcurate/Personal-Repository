#!usr/bin/python3

import binascii

# c = ciphertext
# e = public key
# p and q = factors of modulus N

#---#
c = int("3dbf00a02f924a70f44bdd69e73c46241e9f036bfa49a0c92659d8eb0fe47e42068eaf156a9b3ee81651bc0576a91ffed48610c158dc8d2fb1719c7242704f0d965f8798304925a322c121904b91e5fc5eb3dc960b03eb8635be53b995217d4c317126e0ec6e9a9acfd5d915265634a22a612de962cfaa2e0443b78bdf841ff901423ef765e3d98b38bcce114fede1f13e223b9bd8155e913c8670d8b85b1f3bcb99353053cdb4aef1bf16fa74fd81e42325209c0953a694636c0ce0a19949f343dc229b2b7d80c3c43ebe80e89cbe3a3f7c867fd7cee06943886b0718a4a3584c9d9f9a66c9de29fda7cfee30ad3db061981855555eeac01940b1924eb4c301" , 16) 
e = int("10001", 16)
p = 57970027  
q = 518629368090170828331048663550229634444384299751272939077168648935075604180676006392464524953128293842996441022771890719731811852948684950388211907532651941639114462313594608747413310447500790775078081191686616804987790818396104388332734677935684723647108960882771460341293023764117182393730838418468480006985768382115446225422781116531906323045161803441960506496275763429558238732127362521949515590606221409745127192859630468854653290302491063292735496286233738504010613373838035073995140744724948933839238851600638652315655508861728439180988253324943039367876070687033249730660337593825389358874152757864093
#---#

# Greatest common divisor finder

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b %a, a)
        return (g, x - (b // a) * y, y)

# Modular inverse finder

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('No mod inverse')
    else:
        return x % m

# RSA formula

def rsa(c,e,p,q):
    phi = (p-1)*(q-1)
    d = modinv(e, phi)
    m = pow(c, d, p*q)
    return m

# Message to ascii decode

def flag(m):
    decoded_flag = binascii.unhexlify(hex(m).strip('0x'))
    return decoded_flag

def main():
    m = rsa(c,e,p,q)
    decoded_flag = flag(m)
    print(decoded_flag)

main()
